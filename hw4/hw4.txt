Exercise 1 (CQ):  What would happen in the above code if the second guard were changed from n % 3 == 1 to n % 3 > 0?
The option else will disappear, as it will be included in n % 3 > 0.


Exercise 2 (CQ):  What will the following loop do?
  int x = 2;
  while (x < 5) {
    cerr << "*";
    x += 2;
  }
As long as x < 5 the program will print the * sign. As the initial x = 2, it will happen only twice. The output will be “**”


Exercise 3 (CQ):  What will the following loop do?
  int x = 5;
  while (x > 0) {
    cerr << "loading... \n";
    --x;
  }
It’ll print “loading...”


Exercise 7 (CQ):  Why do you think we moved the line that writes "Blastoff!!!" inside of the for loop?  Look back at where it was in countdown.cpp, and see if you can figure out what would have happened if we hadn’t moved that line (and put an if statement around it).  Why is the if statement around that line needed?
Because in countdown2.cpp it applies to the condition if i = 1 only. If we hadn't moved it it wouldn’t have been the specific to i=1 condition.


Exercise 9 (CQ):  We left the “Blastoff!!!” line in the same place in this example.  Was that necessary?  Try moving it back out to where it was before (and remove the if statement that was around it) and see if that changes the behavior at all.
Yes, it started printing “Blastoff!!!” after each number instead of just at the end. If we change the position and remove the if statement, the program changes a lot. 


Exercise 10 (CQ):  Write a for loop that will make the iterator i go from 100 to 0 in steps of 5 (meaning the sequence 100, 95, 90, … , 15, 10, 5, 0).
#include<iostream>
Using namespace std;


Int main() {
  Cerr << “Countdown: \n100\n”;
  for (int i = 100; i > 0; i -=5) {
    if (i == 0) {
      cerr << “End!”\n”;
    }
    Cerr << i << “\n”;
   }
}
Exercise 11 (CQ):  Start by setting an int variable n to 1.  Then use a while loop to double n until n is greater than 100.  Do not use a break statement.
#include<iostream>
using namespace std;


int main() { 
  cerr << “Cool stuff: \n1\n”;
  for (int n = 1; n < 101; n*=2) {
    if (n==100) {
      cerr << “Cool beans\n”;
    }
    Cerr << n << “\n”;
  }
}


Exercise 12 (CQ):  Write a loop that will make the iterator i be the even numbers from 0 to 100 (inclusive).  Within the loop, set a variable n to be i2, except when i is evenly divisible by 5 (use a continue) and print out n.
#include<iostream>
using namespace std;


int main() {
 cerr << "Countdown:\n1\n";
 for (int i = 0; i % 2 == 0; i < 101) {
   for (int n = i*i) {
       if (n%5==0) {
           cerr << "Oopsie \n";
           continue;
           cerr << n << "\n";
       }
   }
  
   }
 }
}
Exercise 13 (CQ):  Write a loop that successively sets a variable n to be the first 10 Fibonacci numbers (1, 1, 2, 3, 5, 8, 13, 21, 34, 55).
# include<iostream>
Using namespace std;


int main() {
  cerr << “Starting with:\n1\n”;
  for (int n = 1; n <= 55; n +=n);
  Cerr << n << “\n”;
  }
}


Exercise 17 (CQ):  What character is at index [15]?
‘t’


Exercise 18 (CQ):  Modify the yaml for the message bubble to show the time and the author below the text message, with the time to the left of the author, and copy your modified yaml into your hw4.txt file.  (Be careful with indentation… it won’t work if the indentation is not consistent!)


- View:  
          style:
            backgroundColor: aqua
            width: 200
            borderRadius: 15
            marginBottom: 5
            marginLeft: 50
          children:
            - Text: # author
                index: 30
                style:
                  color: green
                  fontSize: 15
                  marginLeft: 10
            - Text: # message
                index: 15
                style:
                  color: black
                  fontSize: 20
                  marginLeft: 10
            - Text:  #time
                index: 1
                style:
                  color: gray
                  fontSize: 10
                  position: absolute
                  right: 10
                  top: 30




Exercise 16 (CQ):  Download an image from the web, move it to your hw4 directory using an appropriate command for the Linux shell (you saw how to do this in lab0), resize it, and change the app.yaml file to place your new image at the center of a green View (you will need to use what you know about Views and View layout).  When you have it working, please paste the content of your app.yaml file into your hw4.txt file.


- View:
        style:
          backgroundColor: forestgreen
          width: 400
          borderRadius: 10
           
- Image:
        source: kitty.jpg
        style:
          width: 250
          height: 50
          marginLeft: 100